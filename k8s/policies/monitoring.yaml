---
# allow nginx > grafana > prometheus
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-grafana
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: prometheus-grafana
  ingress:
  # grafana public incoming:
  - from:
    # we have to open up access to grafana from any pod in the namespace that nginx is egressing from
    # but we would like to have a mechanism to AND the podSelector below this one:
    - namespaceSelector:
        matchLabels:
          name: system
      podSelector:
        matchLabels:
          app: nginx-ingress
          component: controller
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
  egress:
  - to: 
    - podSelector:
        matchLabels:
          app: prometheus
---
# prometheus > scraping endpoints
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-prometheus
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: prometheus
  ingress:
  - from:
    # loopback
    - podSelector:
        matchLabels:
          app: prometheus
  - from:
    - podSelector:
        matchLabels:
          app: prometheus-grafana
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: prometheus-grafana
  - to:
    - podSelector:
        matchLabels:
          app: alertmanager
  - to:
    - podSelector:
        matchLabels:
          app: prometheus-exporter-node
  - to:
    - podSelector:
        matchLabels:
          app: prometheus-exporter-kube-state
  - to:
    - namespaceSelector:
        matchLabels:
          name: system
      podSelector:
        matchLabels:
          app: nginx-ingress
          component: controller
  - to:
    - namespaceSelector:
        matchLabels:
          name: default
      podSelector:
        matchLabels:
          component: kube-controller-manager
  - to:
    - namespaceSelector:
        matchLabels:
          name: default
      podSelector:
        matchLabels:
          component: kube-scheduler
  # nodePort services:
  # kubelet
  - to:
    - ipBlock:
        cidr: 10.192.0.0/8
    ports:
    - protocol: TCP
      port: 10250
    - protocol: TCP
      port: 10251
    - protocol: TCP
      port: 10252
  # dns:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
  # drone
  - to:
    - namespaceSelector:
        matchLabels:
          name: system
      podSelector:
        matchLabels:
          app: drone
          component: server
---
# allow prometheus ingress > alertmanager
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-alertmanager
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: alertmanager
  ingress:
  # mesh communication
  - from:
    - podSelector:
        matchLabels:
          app: alertmanager
  # prometheus
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
---
# allow prometheus ingress > exporter-kube-state
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-exporter-kube-state
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: prometheus-exporter-kube-state
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
---
# allow prometheus ingress > exporter-node
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-exporter-node
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: prometheus-exporter-node
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
